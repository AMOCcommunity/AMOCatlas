{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c6a29764-f39c-431c-8e77-fbc6bfe20f01",
   "metadata": {},
   "source": [
    "# AMOCarray demo\n",
    "\n",
    "The purpose of this notebook is to demonstrate the functionality of `AMOCarray`.\n",
    "\n",
    "The demo is organised to show\n",
    "\n",
    "- Step 1: Loading and plotting a sample dataset\n",
    "\n",
    "- Step 2: Exploring the dataset attributes and variables.\n",
    "\n",
    "Note that when you submit a pull request, you should `clear all outputs` from your python notebook for a cleaner merge.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a1920f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-11T12:50:59.518474Z",
     "iopub.status.busy": "2025-04-11T12:50:59.518023Z",
     "iopub.status.idle": "2025-04-11T12:51:00.399490Z",
     "shell.execute_reply": "2025-04-11T12:51:00.398937Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/runner/work/amocarray/amocarray/amocarray/tools.py:160: SyntaxWarning: invalid escape sequence '\\d'\n",
      "  fill_val = 2 ** (int(re.findall(\"\\d+\", str(new_dtype))[0]) - 1) - 1\n"
     ]
    }
   ],
   "source": [
    "import pathlib\n",
    "import sys\n",
    "\n",
    "script_dir = pathlib.Path().parent.absolute()\n",
    "parent_dir = script_dir.parents[0]\n",
    "sys.path.append(str(parent_dir))\n",
    "\n",
    "import xarray as xr\n",
    "import os\n",
    "import pooch\n",
    "from amocarray import readers, writers, plotters, tools, utilities\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e070d18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-11T12:51:00.401137Z",
     "iopub.status.busy": "2025-04-11T12:51:00.400878Z",
     "iopub.status.idle": "2025-04-11T12:51:00.403376Z",
     "shell.execute_reply": "2025-04-11T12:51:00.403007Z"
    }
   },
   "outputs": [],
   "source": [
    "# Specify the path for writing datafiles\n",
    "data_path = os.path.join(parent_dir, 'data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9414445e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-11T12:51:00.404808Z",
     "iopub.status.busy": "2025-04-11T12:51:00.404660Z",
     "iopub.status.idle": "2025-04-11T12:51:01.486123Z",
     "shell.execute_reply": "2025-04-11T12:51:01.485623Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading file 'moc_vertical.nc' from 'https://www.dropbox.com/scl/fo/4bjo8slq1krn5rkhbkyds/AM-EVfSHi8ro7u2y8WAcKyw?rlkey=16nqlykhgkwfyfeodkj274xpc&dl=0/moc_vertical.nc' to '/home/runner/.cache/amocarray'.\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "SHA256 hash of downloaded file (moc_vertical.nc) does not match the known hash: expected sha256:3d3a40fc45102c4dbe32fcbd03d1ec19724495145d014c6d02a44b8413447d46 but got 2b9a7e528d5701b17f8647e3738f8ea84e6ef2289e23c52c04cc1361f20e196e. Deleted download for safety. The downloaded file may have been corrupted or the known hash may be outdated.",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# Load data from data/moc_transports\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m ds = \u001b[43mreaders\u001b[49m\u001b[43m.\u001b[49m\u001b[43mload_sample_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[38;5;28mprint\u001b[39m(ds)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/work/amocarray/amocarray/amocarray/readers.py:43\u001b[39m, in \u001b[36mload_sample_dataset\u001b[39m\u001b[34m(dataset_name)\u001b[39m\n\u001b[32m     41\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mload_sample_dataset\u001b[39m(dataset_name=\u001b[33m\"\u001b[39m\u001b[33mmoc_vertical.nc\u001b[39m\u001b[33m\"\u001b[39m):\n\u001b[32m     42\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m dataset_name \u001b[38;5;129;01min\u001b[39;00m data_source_og.registry.keys():\n\u001b[32m---> \u001b[39m\u001b[32m43\u001b[39m         file_path = \u001b[43mdata_source_og\u001b[49m\u001b[43m.\u001b[49m\u001b[43mfetch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdataset_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     44\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m xr.open_dataset(file_path)\n\u001b[32m     45\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/TEST/lib/python3.13/site-packages/pooch/core.py:589\u001b[39m, in \u001b[36mPooch.fetch\u001b[39m\u001b[34m(self, fname, processor, downloader, progressbar)\u001b[39m\n\u001b[32m    586\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m downloader \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    587\u001b[39m         downloader = choose_downloader(url, progressbar=progressbar)\n\u001b[32m--> \u001b[39m\u001b[32m589\u001b[39m     \u001b[43mstream_download\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    590\u001b[39m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    591\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfull_path\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    592\u001b[39m \u001b[43m        \u001b[49m\u001b[43mknown_hash\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    593\u001b[39m \u001b[43m        \u001b[49m\u001b[43mdownloader\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    594\u001b[39m \u001b[43m        \u001b[49m\u001b[43mpooch\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    595\u001b[39m \u001b[43m        \u001b[49m\u001b[43mretry_if_failed\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mretry_if_failed\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    596\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    598\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m processor \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    599\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m processor(\u001b[38;5;28mstr\u001b[39m(full_path), action, \u001b[38;5;28mself\u001b[39m)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/TEST/lib/python3.13/site-packages/pooch/core.py:808\u001b[39m, in \u001b[36mstream_download\u001b[39m\u001b[34m(url, fname, known_hash, downloader, pooch, retry_if_failed)\u001b[39m\n\u001b[32m    806\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m temporary_file(path=\u001b[38;5;28mstr\u001b[39m(fname.parent)) \u001b[38;5;28;01mas\u001b[39;00m tmp:\n\u001b[32m    807\u001b[39m     downloader(url, tmp, pooch)\n\u001b[32m--> \u001b[39m\u001b[32m808\u001b[39m     \u001b[43mhash_matches\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtmp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mknown_hash\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstrict\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msource\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mfname\u001b[49m\u001b[43m.\u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    809\u001b[39m     shutil.move(tmp, \u001b[38;5;28mstr\u001b[39m(fname))\n\u001b[32m    810\u001b[39m \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/TEST/lib/python3.13/site-packages/pooch/hashes.py:176\u001b[39m, in \u001b[36mhash_matches\u001b[39m\u001b[34m(fname, known_hash, strict, source)\u001b[39m\n\u001b[32m    174\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m source \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    175\u001b[39m         source = \u001b[38;5;28mstr\u001b[39m(fname)\n\u001b[32m--> \u001b[39m\u001b[32m176\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[32m    177\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00malgorithm.upper()\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m hash of downloaded file (\u001b[39m\u001b[38;5;132;01m{\u001b[39;00msource\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m) does not match\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    178\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33m the known hash: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mknown_hash\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m but got \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnew_hash\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m. Deleted\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    179\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33m download for safety. The downloaded file may have been corrupted or\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    180\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33m the known hash may be outdated.\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    181\u001b[39m     )\n\u001b[32m    182\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m matches\n",
      "\u001b[31mValueError\u001b[39m: SHA256 hash of downloaded file (moc_vertical.nc) does not match the known hash: expected sha256:3d3a40fc45102c4dbe32fcbd03d1ec19724495145d014c6d02a44b8413447d46 but got 2b9a7e528d5701b17f8647e3738f8ea84e6ef2289e23c52c04cc1361f20e196e. Deleted download for safety. The downloaded file may have been corrupted or the known hash may be outdated."
     ]
    }
   ],
   "source": [
    "# Load data from data/moc_transports\n",
    "ds = readers.load_sample_dataset()\n",
    "print(ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cde6d387",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-11T12:51:01.487953Z",
     "iopub.status.busy": "2025-04-11T12:51:01.487681Z",
     "iopub.status.idle": "2025-04-11T12:51:01.503353Z",
     "shell.execute_reply": "2025-04-11T12:51:01.502964Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ds' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mNameError\u001b[39m                                 Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m plotters.show_contents(\u001b[43mds\u001b[49m)\n",
      "\u001b[31mNameError\u001b[39m: name 'ds' is not defined"
     ]
    }
   ],
   "source": [
    "plotters.show_contents(ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c0e74af4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-11T12:51:01.504980Z",
     "iopub.status.busy": "2025-04-11T12:51:01.504595Z",
     "iopub.status.idle": "2025-04-11T12:51:01.604487Z",
     "shell.execute_reply": "2025-04-11T12:51:01.604052Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ds' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mNameError\u001b[39m                                 Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[5]\u001b[39m\u001b[32m, line 6\u001b[39m\n\u001b[32m      3\u001b[39m fig, axes = plt.subplots(nrows=\u001b[32m1\u001b[39m, ncols=\u001b[32m1\u001b[39m, figsize=(\u001b[32m12\u001b[39m, \u001b[32m5\u001b[39m))\n\u001b[32m      5\u001b[39m \u001b[38;5;66;03m# Plot stream function\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m6\u001b[39m \u001b[43mds\u001b[49m[\u001b[33m'\u001b[39m\u001b[33mstream_function_mar\u001b[39m\u001b[33m'\u001b[39m].plot(x=\u001b[33m'\u001b[39m\u001b[33mtime\u001b[39m\u001b[33m'\u001b[39m, y=\u001b[33m'\u001b[39m\u001b[33mdepth\u001b[39m\u001b[33m'\u001b[39m, cmap=\u001b[33m'\u001b[39m\u001b[33mviridis\u001b[39m\u001b[33m'\u001b[39m, ax=axes)\n\u001b[32m      7\u001b[39m axes.set_title(\u001b[33m'\u001b[39m\u001b[33mStream Function (MAR)\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m      8\u001b[39m axes.invert_yaxis()\n",
      "\u001b[31mNameError\u001b[39m: name 'ds' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(12, 5))\n",
    "\n",
    "# Plot stream function\n",
    "ds['stream_function_mar'].plot(x='time', y='depth', cmap='viridis', ax=axes)\n",
    "axes.set_title('Stream Function (MAR)')\n",
    "axes.invert_yaxis()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
